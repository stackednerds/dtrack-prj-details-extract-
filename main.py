
import requests
import pandas as pd
import sys
import json
from datetime import datetime

# API Configuration
DTRACK_BASE_URL = 'http://<APIURL>/api'
DTRACK_API_KEY = 'TOKEN'

# Output file name with current date/time
output_file = f'dependency_track_projects_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'

# Headers for API requests
headers = {
    'X-API-Key': DTRACK_API_KEY,
    'Content-Type': 'application/json'
}

def fetch_all_projects():
    """Fetch all projects from Dependency-Track"""
    url = f"{DTRACK_BASE_URL}/v1/project"
    try:
        print(f"Requesting: {url}")
        response = requests.get(url, headers=headers, verify=False)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching projects: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"Response status: {e.response.status_code}")
            print(f"Response content: {e.response.text[:200]}...")
        sys.exit(1)
    except json.JSONDecodeError:
        print(f"Error decoding JSON response from projects endpoint")
        print(f"Response content: {response.text[:200]}...")
        sys.exit(1)

def main():
    print("Dependency-Track to Excel Exporter (Name and Version Only)")
    print("=========================================================")
    print(f"API URL: {DTRACK_BASE_URL}")
    print(f"Using API Key: {DTRACK_API_KEY[:5]}...{DTRACK_API_KEY[-5:]}")
    print("=========================================================")
    
    # Current date and time
    current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    print("Fetching projects from Dependency-Track...")
    projects = fetch_all_projects()
    
    if not projects:
        print("No projects found.")
        return
    
    print(f"Found {len(projects)} projects.")
    
    # Extract only name and version from projects
    simplified_projects = []
    
    for project in projects:
        simplified_projects.append({
            'Name': project.get('name', ''),
            'Version': project.get('version', ''),
        })
    
    # Convert to DataFrame
    df_projects = pd.DataFrame(simplified_projects)
    
    # Add metadata to a separate sheet
    metadata = [
        {'Key': 'Report Generated On', 'Value': current_datetime},
        {'Key': 'Generated By', 'Value': 'STACKED'},
        {'Key': 'Total Projects', 'Value': len(projects)}
    ]
    df_metadata = pd.DataFrame(metadata)
    
    # Export to Excel
    print(f"Exporting data to Excel...")
    
    with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
        df_projects.to_excel(writer, sheet_name='Projects', index=False)
        df_metadata.to_excel(writer, sheet_name='Metadata', index=False)
        
        # Auto-adjust columns width
        for sheet_name in writer.sheets:
            worksheet = writer.sheets[sheet_name]
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                
                adjusted_width = (max_length + 2)
                worksheet.column_dimensions[column_letter].width = adjusted_width
    
    print(f"Data successfully exported to {output_file}")
    print(f"The file contains {len(simplified_projects)} projects with Name and Version only.")

if __name__ == "__main__":
    main()
